package com.taskdesignsinc.android.myanimeviewer.model;

import java.io.File;
import java.util.Comparator;

import io.objectbox.annotation.Entity;
import io.objectbox.annotation.Id;
import io.objectbox.annotation.Transient;
import io.objectbox.annotation.Generated;
import io.objectbox.annotation.apihint.Internal;

@Entity
public class OfflineHistoryRecord {
    @Id
    private long id = 0;
    private String name = "";
    private String path = "";
    private long timeStamp = -1;
    private int playPosition = -1;
    private boolean isViewed = false;
    @Transient
    private File file = null;

    public OfflineHistoryRecord() {
    }

    @Generated(1839023799)
    @Internal
    /** This constructor was generated by ObjectBox and may change any time. */
    public OfflineHistoryRecord(long id, String name, String path, long timeStamp, int playPosition,
            boolean isViewed) {
        this.id = id;
        this.name = name;
        this.path = path;
        this.timeStamp = timeStamp;
        this.playPosition = playPosition;
        this.isViewed = isViewed;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    /**
     * @return the path
     */
    public String getPath() {
        return path;
    }

    /**
     * @param path the Path to set
     */
    public void setPath(String path) {
        this.path = path;
        String[] lTempList = this.path.split("/");
        name = lTempList[lTempList.length - 1].
                replace("_", " ").replace("[", "").
                replace("]", "");
    }


    public File getFile() {
        if (file == null)
            file = new File(path);
        return file;
    }

    /**
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * @param name the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * @return the timeStamp
     */
    public long getTimeStamp() {
        return timeStamp;
    }

    /**
     * @param timeStamp the TimeStamp to set
     */
    public void setTimeStamp(long timeStamp) {
        this.timeStamp = timeStamp;
    }

    public int getPlayPosition() {
        return playPosition;
    }

    public void setPlayPosition(int pagePos) {
        playPosition = pagePos;
    }

    /**
     * @return the isRead
     */
    public boolean isViewed() {
        return isViewed;
    }

    /**
     * @param isViewed the isRead to set
     */
    public void setIsViewed(boolean isViewed) {
        this.isViewed = isViewed;
    }

    public boolean getIsViewed() {
        return isViewed;
    }

    public static Comparator<OfflineHistoryRecord> SortByTimeStampASC = new Comparator<OfflineHistoryRecord>() {

        @Override
        public int compare(OfflineHistoryRecord pRecord1, OfflineHistoryRecord pRecord2) {

            int diff = (int) (pRecord1.getTimeStamp() - pRecord2.getTimeStamp());

            // ascending order
            return diff;
        }
    };

    public static Comparator<OfflineHistoryRecord> SortByTimeStampDESC = new Comparator<OfflineHistoryRecord>() {

        @Override
        public int compare(OfflineHistoryRecord pRecord1, OfflineHistoryRecord pRecord2) {

            int diff = (int) (pRecord2.getTimeStamp() - pRecord1.getTimeStamp());

            // ascending order
            return diff;
        }
    };
}
